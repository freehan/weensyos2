Name: Zhiyang Wang
UCLA ID: 303991529

Collaborators: Minhan Xia 
UCLA ID: 204000665

-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is:
Round Robin 

(Exercise 2 is a coding exercise)


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0:
A: 319*4 + 1
B: 319*4 + 2
C: 319*4 + 3
D: 319*4 + 4
average: 319*4 + 10/4 = 1276+2.5 = 1278.5 millisecond

Average turnaround time for scheduling_algorithm 1:
A: 320
B: 320*2
C: 320*3
D :320*4
average: 320*2.5 = 800 millisecond

Average wait time for scheduling_algorithm 0:
(0+1+2+3) / 4 = 6 / 4 = 1.5 millisecond

Average wait time for scheduling_algorithm 1:
(0+320+320*2+320*3)/4 = 320 * 6 / 4 = 480 millisecond 

Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?
Both 

For Exercise 4a, according to the requirement, we call the syscall to assign priority in every applications and, in order to let each process to declare their priorities first, we set the initial priority of the 4 the same as 0 so that all of them will first run once and then be scheduled according to the priority they declare.

For Exercise 4b, we design a field called runtime to record the actually running time the process has been allocated with. To record running time, actually there are two ways to do that, one is to modify the run funciton in schedos-x86.c and another is to update the value in the scheduler function. As we consider a situation that user might change the scheduling theme when the system is running, and it's more reasonable to start recording the running time after the user switching to proportional fair theme. So we choose to insert runtime recording in scheduler

Notice: for Exercise 4b, for every one round (as all processes have run their proportional time), they will run alternatively. For example, for A with proportion as 3, B as 2, the system will run as ABABA, rather than AAABB. We think its more reasonable.


Exercise 5:
During the execution of process 4, the first known timer interrupt occur. 
When a clock interrupt occurs, the schedule() function is called. The schedule() functions is called, it finds the next runnable process and run it. So process 4 could not finish execution so it could not print out 4 on the screen. 

(Exercise 6 is a coding exercise)


Anything else you'd like us to know:



Extra credit exercises:
Extra credit 7:
First, we use the random function provided by Steve Park (www.cs.wm.edu/~va/software/park) and add two new system calls as getticket and abortticket. When a process call getticket, its pid will add to the ticket array, and array's index is directly the lottery ticket number. Everytime when scheduling, the kernel get one random index and run the process contained in the element of the array. 

Exercise 8:
We defined CURRENT_PART and EXTRA for you to switch between parts and solutions.

For exercise 6 and 8, I implemented two different mechanisms for synchronization. 
1. Add a system call that print out a char
2. Add a lock to ensure atomic access to cursorpos


  
